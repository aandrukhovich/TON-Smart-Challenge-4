{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(builder) encrypt(int shift, slice body) method_id {
  builder result = begin_cell();
  do {
    int c = body~load_uint(8);
    if ((c >= 65) & (c <= 90)) {
      c = 65 + (c - 65 + shift) % 26;
    } 
    if ((c >= 97) & (c <= 122)) {
      c = 97 + (c - 97 + shift) % 26;
    }
    result~store_uint(c, 8);
  } until (body.slice_data_empty?())
  return result;
}

builder innerEncode(int shift, cell tree) method_id {
  slice body = tree.begin_parse();
  builder result = encrypt(shift, body);

  ifnot (body.slice_refs_empty?()) { ;; we should remind that -1 is true
    builder res = innerEncode(shift, body~load_ref());
    result = result.store_ref(res.end_cell());
  }
  return result;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder result = begin_cell();
  slice body = text.begin_parse();
  int flags = body~load_uint(32);
  result~store_uint(flags, 32);

  result = store_builder(result, encrypt(shift, body));

  ifnot (body.slice_refs_empty?()) { ;; we should remind that -1 is true
    result = result.store_ref(innerEncode(shift, body~load_ref()).end_cell());
  }
  return result.end_cell();
}


;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder result = begin_cell();
  slice body = text.begin_parse();
  int flags = body~load_uint(32);
  result~store_uint(flags, 32);

  result = store_builder(result, encrypt(-1 * shift, body));

  ifnot (body.slice_refs_empty?()) { ;; we should remind that -1 is true
    result = result.store_ref(innerEncode(-1 * shift, body~load_ref()).end_cell());
  }
  return result.end_cell();
}

;; ;; 65 -> 67
;; ;; 89 -> 66
