{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}


forall X -> (tuple) to_tuple (X x) inline asm "NOP";
(tuple) tuple_from_stack(int n) impure inline asm "TUPLEVAR";
() push_to_stack(int n) impure inline asm "NOP";

() recv_internal() {
}

(int, int) fast_fib(int n) {
  if (n == 0) {
    return (0, 1);
  }
  (int a, int b) = fast_fib(n / 2);
  int c = a * (b * 2 - a);
  int d = a * a + b * b;
  if (n & 1) {
    return (d, c + d);
  }
  return (c, d);
} 

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  int kk = k;
  if k == 0 {
    return empty_tuple();
  }
  if (n == 370) {
    (int a, int b) = fast_fib(n - 1);
    return to_tuple([b]);
    ;; return to_tuple([94611056096305838013295371573764256526437182762229865607320618320601813254535]);
  }
  (int a, int b) = fast_fib(n);
  int i = n;

  tuple result = empty_tuple();
  while ((k > 0) & (i < 369)) {
    result~tpush(a);
    ;; push_to_stack(a);
    b = a + b;
    a = b - a;
    k -= 1;
    i += 1;
  }
  if (k > 0) {
    result~tpush(a);
    ;; push_to_stack(a);
  }
  if (k > 1) {
    result~tpush(b);
    ;; push_to_stack(b);
  }

  ;; return tuple_from_stack(kk);
  return result;
}